name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Ensure Node exists for syntax gate & validator
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Debug dump (env/tree)
        run: |
          set -euxo pipefail
          node -v
          pwd
          find . -maxdepth 2 -type f | sort

      - name: Syntax check all JS (fast fail on real parse errors)
        run: |
          set -euo pipefail
          jsfiles=$(git ls-files '*.js' || true)
          if [ -n "$jsfiles" ]; then
            echo "$jsfiles" | while read -r f; do
              echo "checking $f"; node --check "$f";
            done
          else
            echo "no JS files to check"
          fi

      # Non-fatal CSS reference validator (no external deps)
      - name: Validate CSS asset references (non-fatal)
        continue-on-error: true
        run: |
          set -euo pipefail
          node - <<'NODE'
          const fs = require('fs'); const path = require('path');
          function walk(d, out=[]){
            for (const e of fs.readdirSync(d,{withFileTypes:true})) {
              const p = path.join(d, e.name);
              if (e.isDirectory() && !['.git','node_modules','dist'].includes(e.name)) walk(p,out);
              else if (e.isFile() && p.endsWith('.css')) out.push(p);
            }
            return out;
          }
          const cssFiles = walk(process.cwd());
          const re = /url\(\s*(['"]?)([^'")#]+)(?:\?[^'")]*)?\1\s*\)/g;
          const missing=[];
          for (const css of cssFiles) {
            const text = fs.readFileSync(css, 'utf8'); let m;
            while ((m = re.exec(text))) {
              const href = m[2].trim();
              if (/^(data:|https?:|\/\/)/i.test(href)) continue; // externals/data
              const target = path.resolve(path.dirname(css), href);
              if (!fs.existsSync(target)) missing.push(`${css} -> ${href}`);
            }
          }
          if (missing.length) {
            console.warn('CSS references that do not exist (non-fatal):');
            for (const line of missing) console.warn(line);
          } else {
            console.log('CSS assets OK');
          }
          NODE

      # Static site -> upload whole repo (adjust to dist/ if you build)
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

  smoke:
    name: Smoke test live site
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Probe key endpoints (verbose & strict)
        run: |
          set -euxo pipefail
          URL="${{ needs.deploy.outputs.page_url }}"
          ROOT="${URL%/}"
          {
            echo "ROOT=$ROOT"
            curl -fIL "$ROOT/"
            curl -fIL "$ROOT/offline.html" || true
            curl -fIL "$ROOT/assets/soccer-ball.svg"

            # content-type must be SVG
            curl -fsSI "$ROOT/assets/soccer-ball.svg" \
              | tr -d '\r' | grep -qi '^content-type: *image/svg\+xml'

            # body sanity: allow XML prolog or <svg on first few lines
            curl -fsSL "$ROOT/assets/soccer-ball.svg" \
              | tr -d '\r' | head -n 5 | grep -Eqi '<svg|<\?xml'

            # verify back-to-top button exists
            curl -fsSL "$ROOT/" | tr -d '\r' | grep -Eq 'id="backToTop"|id="back-to-top"'

            # prove tooltip text exists somewhere
            curl -fsSL "$ROOT/" | tr -d '\r' | grep -qi 'Back to top'

            # crest exists and is an SVG
            curl -fsSL "$ROOT/assets/FC_Barcelona_logo.svg" | grep -qi "<svg"
          } | tee smoke.log
      - name: Upload smoke logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: smoke.log
          retention-days: 7