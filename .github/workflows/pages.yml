name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_DIR: dist
    steps:
      - uses: actions/checkout@v4

      # DEBUG: show tree + env
      - name: Debug dump (tree/env)
        run: |
          set -euxo pipefail
          pwd; node -v; npm -v
          ls -la
          echo "---- repo tree ----"
          find . -maxdepth 2 -type f | sort

      # Fail fast on JS syntax (prevents shipping parse errors)
      - name: Syntax check all JS
        run: |
          set -e
          shopt -s globstar nullglob
          for f in **/*.js; do
            echo "checking $f"; node --check "$f";
          done

      # Validate CSS url(...) targets (no missing ../assets again)
      - name: Validate CSS asset references (no external deps)
        run: |
          set -euo pipefail
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          function walk(dir, out=[]) {
            for (const e of fs.readdirSync(dir, { withFileTypes:true })) {
              const p = path.join(dir, e.name);
              if (e.isDirectory() && !['.git','node_modules','dist'].includes(e.name)) walk(p, out);
              else if (e.isFile() && p.endsWith('.css')) out.push(p);
            }
            return out;
          }
          const cssFiles = walk(process.cwd());
          const missing = [];
          const re = /url\(\s*(['"]?)([^'")#]+)(?:\?[^'")]*)?\1\s*\)/g;
          for (const css of cssFiles) {
            const text = fs.readFileSync(css, 'utf8');
            let m;
            while ((m = re.exec(text))) {
              const href = m[2].trim();
              if (/^(data:|https?:|\/\/)/i.test(href)) continue; // ignore externals/data
              const target = path.resolve(path.dirname(css), href);
              if (!fs.existsSync(target)) missing.push(`${css} -> ${href}`);
            }
          }
          if (missing.length) {
            console.error('Missing CSS assets:\\n' + missing.join('\\n'));
            process.exit(1);
          }
          console.log('CSS assets OK');
          NODE

      - name: Detect package manager lockfile
        id: detect_lock
        run: |
          echo "npm_lock=$(ls -1 **/package-lock.json 2>/dev/null | wc -l)" >> $GITHUB_OUTPUT
          echo "yarn_lock=$(ls -1 **/yarn.lock 2>/dev/null | wc -l)"       >> $GITHUB_OUTPUT
          echo "pnpm_lock=$(ls -1 **/pnpm-lock.yaml 2>/dev/null | wc -l)"  >> $GITHUB_OUTPUT

      - name: Set mode (build vs static)
        id: mode
        run: |
          total_locks=$(( ${{ steps.detect_lock.outputs.npm_lock }} + ${{ steps.detect_lock.outputs.yarn_lock }} + ${{ steps.detect_lock.outputs.pnpm_lock }} ))
          if [ "$total_locks" -gt 0 ]; then echo "mode=build" >> $GITHUB_OUTPUT; else echo "mode=static" >> $GITHUB_OUTPUT; fi

      # ---------- BUILD PATH ----------
      - name: Setup Node
        if: ${{ steps.mode.outputs.mode == 'build' }}
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        if: ${{ steps.mode.outputs.mode == 'build' }}
        run: |
          if [ -f package-lock.json ]; then npm ci;
          elif [ -f yarn.lock ]; then corepack enable && yarn install --frozen-lockfile;
          elif [ -f pnpm-lock.yaml ]; then corepack enable && pnpm install --frozen-lockfile;
          fi

      - name: Build site
        if: ${{ steps.mode.outputs.mode == 'build' }}
        run: |
          if npm run | grep -q " build"; then npm run build;
          elif command -v yarn >/dev/null && yarn run | grep -q " build"; then yarn build;
          elif command -v pnpm >/dev/null && pnpm run | grep -q " build"; then pnpm build;
          else echo "No build script found; failing in build mode." && exit 1; fi

      - name: Upload artifact (build)
        if: ${{ steps.mode.outputs.mode == 'build' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_DIR }}

      # ---------- STATIC PATH ----------
      - name: Upload artifact (static)
        if: ${{ steps.mode.outputs.mode == 'static' }}
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      # Upload workspace snapshot even if later steps fail
      - name: Upload workspace snapshot
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: workspace-tree
          path: |
            .
          include-hidden-files: true
          retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Configure Pages
        uses: actions/configure-pages@v5
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  smoke:
    name: Smoke test live site
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Probe key endpoints (verbose & strict)
        run: |
          set -euxo pipefail
          URL="${{ needs.deploy.outputs.page_url }}"
          ROOT="${URL%/}"
          {
            echo "ROOT=$ROOT"
            # must be reachable
            curl -fIL "$ROOT/"
            curl -fIL "$ROOT/offline.html"
            curl -fIL "$ROOT/assets/soccer-ball.svg"

            # content-type must be SVG
            curl -fsSI "$ROOT/assets/soccer-ball.svg" \
              | tr -d '\r' | grep -qi '^content-type: *image/svg\+xml'

            # body sanity: allow XML prolog or <svg on first few lines
            curl -fsSL "$ROOT/assets/soccer-ball.svg" \
              | tr -d '\r' | head -n 5 | grep -Eqi '<svg|<\?xml'
          } | tee smoke.log
      - name: Upload smoke logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: smoke.log
          retention-days: 7