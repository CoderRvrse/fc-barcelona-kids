name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
    # Only run when site files change
    paths:
      - "index.html"
      - "styles/**"
      - "scripts/**"
      - "assets/**"
      - "sw.js"
      - ".github/workflows/pages.yml"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-deploy
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v5

      # Always upload a tiny workspace tree for debugging
      - name: Snapshot workspace tree
        run: |
          mkdir -p .ci
          printf "Commit: %s\nRun: %s\n" "${GITHUB_SHA}" "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" > .ci/meta.txt
          (echo "---- tree ----"; git ls-files) >> .ci/meta.txt
        shell: bash

      - name: Upload workspace snapshot
        uses: actions/upload-artifact@v4
        with:
          name: workspace-tree
          path: .ci/meta.txt
          retention-days: 7

      # JS syntax gate (fast, lockfile-free)
      - name: JS parse gate
        shell: bash
        run: |
          shopt -s nullglob
          js=(scripts/*.js scripts/**/*.js)
          if [ ${#js[@]} -gt 0 ]; then
            for f in "${js[@]}"; do
              echo "node --check $f"
              node --check "$f"
            done
          fi

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .
          retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

  smoke:
    name: Smoke test live site
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Derive live URL
        id: url
        run: |
          # actions/deploy-pages exposes 'page_url' via environments; re-resolve here:
          echo "url=${{ needs.deploy.outputs.page_url }}" >> "$GITHUB_OUTPUT" || true
          # Fallback if runner can't read env output (rare):
          if [ -z "${{ needs.deploy.outputs.page_url }}" ]; then
            echo "url=https://coderrvrse.github.io/fc-barcelona-kids" >> "$GITHUB_OUTPUT"
          fi

      - name: Curl checks
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${{ needs.deploy.outputs.page_url }}"
          # Fallback URL if needed
          if [ -z "$ROOT" ]; then
            ROOT="https://coderrvrse.github.io/fc-barcelona-kids"
          fi
          echo "ROOT=$ROOT"

          # 1) index reachable
          curl -fsSL "$ROOT/" -o /tmp/index.html
          # 2) hero markers present
          grep -E 'id="heroTitle"|id="hero-title"' /tmp/index.html >/dev/null

      - name: Smoke - solid hero title present & correct
        shell: bash
        run: |
          set -euo pipefail
          LIVE_URL="${{ needs.deploy.outputs.page_url }}"
          if [ -z "$LIVE_URL" ]; then
            LIVE_URL="https://coderrvrse.github.io/fc-barcelona-kids"
          fi
          curl -fsSL "$LIVE_URL" -o /tmp/page.html
          # Assert the title exists (solid text)
          grep -q 'FC BARCELONA' /tmp/page.html
          echo "âœ… Hero title verified"

      - name: Curl checks continued
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${{ needs.deploy.outputs.page_url }}"
          if [ -z "$ROOT" ]; then
            ROOT="https://coderrvrse.github.io/fc-barcelona-kids"
          fi

          # 3) critical assets exist + header checks
          curl -fsSI "$ROOT/assets/soccer-ball.svg" | grep -Ei '^content-type: *image/svg\+xml' >/dev/null
          curl -fsSI "$ROOT/assets/FC_Barcelona_logo.svg" | grep -Ei '^content-type: *image/svg\+xml' >/dev/null

          # 4) service worker reachable (not 404)
          curl -fsSI "$ROOT/sw.js" | head -n 20 > /tmp/sw-headers.txt
          grep -Ei '^HTTP/.* 200' /tmp/sw-headers.txt >/dev/null || (echo "SW not 200"; cat /tmp/sw-headers.txt; exit 1)

          # 5) Save a tiny smoke log for artifacts
          {
            echo "ROOT=$ROOT"
            echo "-- index markers --"
            grep -Eo 'id="heroTitle"|id="hero-title"' /tmp/index.html | sort -u
            echo "-- assets --"
            curl -fsSI "$ROOT/assets/soccer-ball.svg" | head -n 10
            curl -fsSI "$ROOT/assets/FC_Barcelona_logo.svg" | head -n 10
            echo "-- sw --"
            cat /tmp/sw-headers.txt
          } > /tmp/smoke.log

      - name: Upload smoke logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-logs
          path: /tmp/smoke.log
          retention-days: 7
